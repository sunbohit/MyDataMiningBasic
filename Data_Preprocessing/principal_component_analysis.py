'''
用sklearn进行PCA主成分分析降维
'''

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA

input_file = 'principal_component.xls' #数据集
output_file = 'principal_component_PCA.xls' #输出路径

pc_data = pd.read_excel(input_file, header=None)
pca_model = PCA()
pca_model.fit(pc_data) #训练PCA模型

#print(pca_model.components_) #输出特征向量
'''
[[ 0.56788461  0.2280431   0.23281436  0.22427336  0.3358618   0.43679539
   0.03861081  0.46466998]
 [ 0.64801531  0.24732373 -0.17085432 -0.2089819  -0.36050922 -0.55908747
   0.00186891  0.05910423]
 [-0.45139763  0.23802089 -0.17685792 -0.11843804 -0.05173347 -0.20091919
  -0.00124421  0.80699041]
 [-0.19404741  0.9021939  -0.00730164 -0.01424541  0.03106289  0.12563004
   0.11152105 -0.3448924 ]
 [-0.06133747 -0.03383817  0.12652433  0.64325682 -0.3896425  -0.10681901
   0.63233277  0.04720838]
 [ 0.02579655 -0.06678747  0.12816343 -0.57023937 -0.52642373  0.52280144
   0.31167833  0.0754221 ]
 [-0.03800378  0.09520111  0.15593386  0.34300352 -0.56640021  0.18985251
  -0.69902952  0.04505823]
 [-0.10147399  0.03937889  0.91023327 -0.18760016  0.06193777 -0.34598258
  -0.02090066  0.02137393]]
'''
#print(pca_model.explained_variance_ratio_) #输出各个成分各自的方差百分比，也就是贡献率
'''
[  7.74011263e-01   1.56949443e-01   4.27594216e-02   2.40659228e-02
   1.50278048e-03   4.10990447e-04   2.07718405e-04   9.24594471e-05]
'''
#print(np.cumsum(pca_model.explained_variance_ratio_)) #计算累计贡献率
'''
[ 0.77401126  0.93096071  0.97372013  0.99778605  0.99928883  0.99969982
  0.99990754  1.        ]
'''
pca_3 = PCA(3) #选取前 3 个主成分进行计算 
pca_3.fit(pc_data)
pc_data_low = pca_3.transform(pc_data) #降维
#print(type(pc_data_low))
'''
<class 'numpy.ndarray'>
'''
#print(pc_data_low)
'''
[[  8.19133694  16.90402785   3.90991029]
 [  0.28527403  -6.48074989  -4.62870368]
 [-23.70739074  -2.85245701  -0.4965231 ]
 [-14.43202637   2.29917325  -1.50272151]
 [  5.4304568   10.00704077   9.52086923]
 [ 24.15955898  -9.36428589   0.72657857]
 [ -3.66134607  -7.60198615  -2.36439873]
 [ 13.96761214  13.89123979  -6.44917778]
 [ 40.88093588 -13.25685287   4.16539368]
 [ -1.74887665  -4.23112299  -0.58980995]
 [-21.94321959  -2.36645883   1.33203832]
 [-36.70868069  -6.00536554   3.97183515]
 [  3.28750663   4.86380886   1.00424688]
 [  5.99885871   4.19398863  -8.59953736]]
'''
pd.DataFrame(pc_data_low).to_excel(output_file)
pc_data_re = pca_3.inverse_transform(pc_data_low) #尝试升维还原数据
#print(pc_data_re)
'''
[[ 41.81945026  17.92938537   7.42743613   6.38423781   7.51911186
    7.95581778   1.89450158  22.64634237]
 [ 26.03033486   8.31048339  11.0923029   10.50941053  13.73592734
   19.29219354   1.55616178  10.69991334]
 [ 12.8912027    4.7200299    4.15574756   3.88084002   4.15590258
    5.95354081   0.63142514   3.10031979]
 [ 21.95107023   7.86983692   5.61296149   5.00363184   5.46598715
    7.32692984   1.00043437   6.90279388]
 [ 33.2494621   16.9295226    6.97070109   6.54184048   8.78799069
    9.47854775   1.76803069  25.48379317]
 [ 35.30223656  14.31635159  16.19611986  15.83211443  22.51688172
   30.25654088   2.46591519  25.94480913]
 [ 22.0404299    7.67212745   9.96458085   9.59042702  12.69748404
   17.7402549    1.39886681  10.62704002]
 [ 47.82344306  16.03581175  11.11907058   9.5362307   11.08119152
   14.24461981   2.12478649  16.79265084]
 [ 40.72333307  17.98533192  20.14597677  19.9884634   29.35835797
   39.0457226    3.09998769  36.25975467]
 [ 24.50981762   9.36433655   9.52005459   9.10471477  12.0327766
   16.33445643   1.4768007   13.14701555]
 [ 13.3825743    5.67777166   4.16004148   3.95836057   4.47861564
    6.08501405   0.6981744    5.42443324]
 [  1.44783093   2.03894892   0.87728401   1.09467426   0.69475478
    1.13961005   0.11798269   0.47858262]
 [ 32.5440038   13.14166028   8.856767     8.14476825  10.36303253
   13.1291864    1.68627384  17.31120923]
 [ 37.98481061  11.3084017   11.30095568  10.03028594  12.01198559
   16.61756516   1.80165862  10.78134217]]
'''
