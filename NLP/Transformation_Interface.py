'''
向量空间转换
'''
from gensim import corpora, models, similarities
dictionary = corpora.Dictionary.load('deerwester.dict') #载入词典
corpus = corpora.MmCorpus('deerwester.mm') #载入语料库
#print(dictionary.token2id)
'''
{'computer': 0, 'system': 6, 'survey': 5, 'response': 7, 'interface': 2, 'human': 1, 'time': 4, 'trees': 9, 'minors': 11, 'graph': 10, 'user': 3, 'eps': 8}
'''
#print(corpus)
'''
MmCorpus(9 documents, 12 features, 28 non-zero entries)
'''
#for doc in corpus:
#	print(doc)
'''
[(0, 1.0), (1, 1.0), (2, 1.0)]
[(0, 1.0), (3, 1.0), (4, 1.0), (5, 1.0), (6, 1.0), (7, 1.0)]
[(2, 1.0), (3, 1.0), (6, 1.0), (8, 1.0)]
[(1, 1.0), (6, 2.0), (8, 1.0)]
[(3, 1.0), (4, 1.0), (7, 1.0)]
[(9, 1.0)]
[(9, 1.0), (10, 1.0)]
[(9, 1.0), (10, 1.0), (11, 1.0)]
[(5, 1.0), (10, 1.0), (11, 1.0)]
'''
tfidf = models.TfidfModel(corpus) #从语料库中训练得到TF-IDF模型
doc_bow = [(0, 1), (1, 1)] #创建一个新的向量
#print(tfidf[doc_bow]) #用TF-IDF模型转化这个向量
'''
[(0, 0.7071067811865476), (1, 0.7071067811865476)]
'''
corpus_tfidf = tfidf[corpus] #用TF-IDF模型转化整个语料库
#for doc in corpus_tfidf: 
#	print(doc)
'''
[(0, 0.7071067811865476), (1, 0.7071067811865476)]
[(0, 0.5773502691896257), (1, 0.5773502691896257), (2, 0.5773502691896257)]
[(0, 0.44424552527467476), (3, 0.3244870206138555), (4, 0.44424552527467476), (5, 0.44424552527467476), (6, 0.3244870206138555), (7, 0.44424552527467476)]
[(2, 0.5710059809418182), (3, 0.4170757362022777), (6, 0.4170757362022777), (8, 0.5710059809418182)]
[(1, 0.49182558987264147), (6, 0.7184811607083769), (8, 0.49182558987264147)]
[(3, 0.45889394536615247), (4, 0.6282580468670046), (7, 0.6282580468670046)]
[(9, 1.0)]
[(9, 0.7071067811865475), (10, 0.7071067811865475)]
[(9, 0.5080429008916749), (10, 0.5080429008916749), (11, 0.695546419520037)]
[(5, 0.6282580468670046), (10, 0.45889394536615247), (11, 0.6282580468670046)]
'''
lsi = models.LsiModel(corpus_tfidf, id2word=dictionary, num_topics=2) #创建LSI模型，主题数为2
corpus_lsi = lsi[corpus_tfidf] # 继续用LSI处理语料，实现了bow->tfidf->fold-in-lsi
#print(lsi.print_topics(2)) # 输出特征词和权值
'''
[(0, '0.703*"trees" + 0.538*"graph" + 0.402*"minors" + 0.187*"survey" + 0.061*"system" + 0.060*"time" + 0.060*"response" + 0.058*"user" + 0.049*"computer" + 0.035*"interface"'), (1, '-0.460*"system" + -0.373*"user" + -0.332*"eps" + -0.328*"interface" + -0.320*"response" + -0.320*"time" + -0.293*"computer" + -0.280*"human" + -0.171*"survey" + 0.161*"trees"')]
'''
#for doc in corpus_lsi: # 查看bow->tfidf 和 tfidf->lsi 的最后结果
#	print(doc)
'''
[(0, 0.066007833960902595), (1, 0.52007033063618502)]
[(0, 0.19667592859142533), (1, 0.76095631677000519)]
[(0, 0.089926399724463452), (1, 0.7241860626752511)]
[(0, 0.07585847652178096), (1, 0.63205515860034267)]
[(0, 0.10150299184980197), (1, 0.57373084830029597)]
[(0, 0.70321089393783143), (1, -0.16115180214025748)]
[(0, 0.8774787673119836), (1, -0.16758906864659348)]
[(0, 0.90986246868185838), (1, -0.14086553628718945)]
[(0, 0.61658253505692873), (1, 0.053929075663894321)]
'''
lsi.save('new_model.lsi') # 保存LSI模型，TF-IDF、LDA等也是同样的保存方法
lsi = models.LsiModel.load('new_model.lsi') # 载入LSI模型
